" =============================================================================
" #     FileName: _vimrc
" #         Desc:
" #       Author: Marslo
" #      Version: 0.0.7
" #   LastChange: 2012-11-08 16:44:38
" #      History: 0.0.3: Add the Autoload and Fast Edit difference between win32 and non-win32
"                 0.0.4: Add CheckRubySyntax() function for checking and run ruby script
"                 0.0.5: Add the function of highlight txt file
"                        Add the function of Automatic paire signs (), [], {}, '', etc
"                 0.0.6: Remove a pair of parentheses, brackets, or braces
"                 0.0.7: Modification about autoPair(): if there are char behind the ( or [ or { it wont pair
" =============================================================================

" Remove the Welcome interface
" set shortmess=atI

" ====================================== For Property =====================================
" Set mapleader
let mapleader=","
let g:mapleader=","

set clipboard+=unnamed
set clipboard+=unnamedplus

" document format
set fileformat=unix
" :%s/\r\+$//e

" Code format
set fileencodings=utf8,ucs-bom,gbk,cp936,gb2312,gb18030
set termencoding=utf-8
set encoding=utf8
set fileencoding=utf8
let &termencoding=&encoding
" :edit ++enc=utf-8 filenme

" ====================================== For Programming =====================================
func! RunResult()
    let mp = &makeprg
    let ef = &errorformat
    let exeFile = expand("%:t")
    exec "w"
    if &filetype == "Python"
        setlocal makeprg=python\ -u
    elseif &filetype == "perl"
        setlocal makeprg=perl
    elseif &filetype == "ruby"
        setlocal makeprg=ruby
    endif
    set efm=%C\ %.%#,%A\ \ File\ \"%f\"\\,\ line\ %l%.%#,%Z%[%^\ ]%\\@=%m
    silent make %
    copen
    let &makeprg     = mp
    let &errorformat = ef
endfunc
map <F5> :call RunResult()<CR>

map rc :call CompileRunGpp()<CR>
func! CompileRunGpp()
    exec "w"
    exec "!gcc % -o %<"
    exec "! %<"
endfunc

" Automatic Pair
" inoremap ( ()<ESC>i
inoremap <buffer> ( <c-r>=AutoPair('(')<CR>
inoremap <buffer> ) <c-r>=ClosePair(')')<CR>
" inoremap [ []<ESC>i
inoremap <buffer> [ <c-r>=AutoPair('[')<CR>
inoremap <buffer> ] <c-r>=ClosePair(']')<CR>
" inoremap { {<CR>}<ESC>ka<CR>
inoremap <buffer> { <c-r>=AutoPair('{')<CR>
inoremap <buffer> } <c-r>=ClosePair('}')<CR>


func! AutoPair(char)
    " let curchar = getline('.')[col('.') - 1]
    let bchar = getline('.')[col('.')]
    if "(" == a:char
        if &ft =~ '^\(disable_sql\)$'
            return "(\<Enter>);\<Up>\<Enter>"
        elseif '' == bchar
            return "()\<Left>"
        else
            return a:char
        endif
    elseif "[" == a:char 
        if '' == bchar
            return "[]\<Left>"
        else
            return a:char
        endif
    elseif "{" == a:char
        if &ft =~ '^\(ruby\|java\|perl\)$'
            return "{\<Enter>}\<ESC>ko"
            " return "{\<Enter>}\<Up>\<Enter>"
        elseif '' == bchar && &ft =~ '^\(python\|autohotkey\|vim\|snippet\|txt\)$'
            return "{}\<Left>"
        else
            return a:char
        endif
    endif
endfunc




function! ClosePair(char)
    if getline('.')[col('.') - 1] == a:char
        return "\<Right>"
    else
        return a:char
    endif
endfunction


inoremap <buffer> <BS> <c-r>=DeletePairs()<CR>
inoremap <buffer> <C-h> <c-r>=DeletePairs()<CR>

" Delete a pair of parentheses, brackets, or braces
function! DeletePairs()
    let curchar = getline('.')[col('.') - 1]
    let prechar = getline('.')[col('.') - 2]

    let AutoPaires = {')':'(',']':'[','}':'{'}
    if has_key(AutoPaires, curchar) && prechar == AutoPaires[curchar]
        return "\<BS>\<DEL>"
    else
        return "\<BS>"
    endif
endfunction

iabbrev <leader>/* /*********************************
iabbrev <leader>*/ *********************************/
iabbrev <leader>#- #------------------
inoremap <leader>tt <c-r>=strftime("%d/%m/%y %H:%M:%S")<cr>
inoremap <leader>fn <C-R>=expand("%:t:r")<CR>
inoremap <leader>fe <C-R>=expand("%:t")<CR>

" ====================================== For Inteface =====================================
" Make vim maximize while it startup
func! MaximizeWindow()
    silent !wmctrl -r :ACTIVE: -b add,maximized_vert,maximized_horz
endfunc

" The initialize size
if has('gui_running')
    set lines=32
    set columns=108
endif

if has('win32')
    " Max after start vim
    " au GUIEnter * simalt ~x
    " autoload â€”vimrc
    autocmd! bufwritepost $VIM/_vimrc source %
    " Fast Edit vim configuration
    nmap <leader>v :e $VIM/_vimrc<CR>
    " Fonts
    set guifont=Monaco:h12
else
    " au GUIEnter * call MaximizeWindow()
    autocmd! bufwritepost ~/.vimrc source %
    nmap <leader>v :e ~/.vimrc<CR>
    set guifont=Monaco\ 12
endif

set nobackup
set noswapfile
set nowritebackup


set number
colorscheme desert_Marslo_ForLinux_v3
let psc_style='cool'

" colorscheme desert
syntax enable
syntax on
filetype plugin on

" Hide everything
" set go=

" Hide the tool bar
set guioptions-=T
" Hide the side scroll bar
set guioptions-=r
" Add the bottom scroll bar
" set guioptions+=b
" Hide the Menu
set guioptions-=m

" Set auto read when a file is changed by outside
set autoread

" Show matching bracets
set showmatch

" Wrap lines
set nowrap

" Tab width
set tabstop=4
set expandtab
" set textwidth=150
set autoindent
set smartindent
" the width of <Tab> in first line would refer to 'Shiftwidth' parameter
set smarttab
" the width while trigger <Tab> key
set softtabstop=4
" the tab width by using >> & <<
set shiftwidth=4
set lbr
set tw=0

" Show Line and colum number
set ruler

" Set status bar
set laststatus=2
set statusline=%m%r
set statusline=%f\ \ %y,%{&fileformat}\  " file path\file name & filetype
set statusline+=%=      " right align
set statusline+=\ \ %-{strftime(\"%H:%M\ %d/%m/%Y\")}   " Current Time
set statusline+=\ \ %b[A],0x%B    " ASCII code, Hex mode
set statusline+=\ \ %c%V,%l/%L      " current Column, current Line/All Line
set statusline+=\ \ %p%%\

" At Menu
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim
" At Console
" language messages utf-8

" Show (partial) command in status line
set showcmd

" Fold
set foldenable "Enable Fold
set foldmethod=manual
set foldcolumn=1
set foldexpr=1 "Shown line number after fold
set foldlevel=100 " Not fold while VIM set up
autocmd BufWinLeave * silent! mkview
autocmd BufWinEnter * silent! loadview
set viewoptions=folds


" Highlight the txt file
au BufRead,BufNewFile *  setfiletype txt
" au BufRead,BufNewFile *.txt setfiletype txt
" Perl test file as Perl code
au BufRead,BufNewFile *.t set ft=perl

" ====================================== For Function =====================================
" make backspace h, l, etc wrap to
" set backspace=indent,eol,start
" set whichwrap+=<,>,h,l

nmap <leader>s :ConqueTermSplit
nmap tv :ConqueTermSplit bash <CR>

" Delete the black space in the end of each line
nmap zdb :%s/\s\+$//<CR>
nmap zmm :g/^/ s//\=line('.').' '/<CR>

" Search
set incsearch
set hlsearch
set ignorecase

" Regular Expression
set magic

" Tagbar
map <F6> :TagbarToggle<CR>
let g:tagbar_left=1
let g:tagbar_width=20
let g:tagbar_autofocus=1
let g:tagbar_expand=1
let g:tagbar_singleclick=1
let g:tagbar_iconchars=['+', '-']
let g:tagbar_autoshowtag=1

" Comments
" nmap <silent> ,x
vmap <silent> <C-Q> ,x
imap <silent> <C-Q> ,x
let g:EnhCommentifyAlignRight='yes'
let g:EnhCommentifyRespectIndent='yes'
let g:EnhCommentifyPretty='Yes'
let g:EnhCommentifyMultiPartBlocks='yes'
let g:EnhCommentifyUseSyntax='Yes'
let g:EnhCommentifyAlignRight='Yes'

" AutoInfo
map <F4> :AuthorInfoDetect<cr>
let g:vimrc_author='Marslo'
let g:vimrc_email='marslo.vida@gmail.com'

" MRU
" let MRU_File=$VIM.'\Data\mru_files.txt'
let MRU_Auto_Close=1
map <silent> <leader>h :MRU<CR>
map <C-g> :MRU<CR>
let MRU_Max_Entries=10
set modifiable
set write

" E21\: Cannot make changes, 'modifiable' is off:     $delete
set linespace=0
set wildmenu

noremap <F1> <ESC>
imap <F1> <ESC>a

map <C-k> <C-w>k
map <C-j> <C-w>j

map <C-a> <ESC>^
imap <C-a> <ESC>I
map <C-e> <ESC>$
imap <C-e> <ESC>A

map <C-c> "+y
map <C-v> "+p
map gl <CR>


" Cursor format
set guicursor=a:hor10
set guicursor+=i-r-ci-cr-o:hor10-blinkon0
set scrolloff=5

" turn off error beep/flash
set noerrorbells
set novisualbell
set t_vb=

set path+=/home/marslo/Study
set cursorline

" IndentLine
let g:indentLine_color_gui = '#282828'
let g:indentLine_color_term = 7
let g:indentLine_char = '|'
" let g:indentLine_loaded = 1

set list listchars=tab:\ \ ,trail:.,extends:>,precedes:<,nbsp:.
